#ifndef MAINWINDOW_H
#define MAINWINDOW_H

// Includes the necessary Qt classes and your custom class
#include <QMainWindow>   // Provides the base class for application main windows
#include "scene.h"       // Includes the custom Scene class (likely a custom QGraphicsScene for rendering game or graphical elements)

QT_BEGIN_NAMESPACE
// Forward declaration for the Ui namespace to avoid including the generated UI header file here
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

// MainWindow class inherits from QMainWindow, providing functionality typical of a main application window
class MainWindow : public QMainWindow
{
    Q_OBJECT  // Macro required for any class that uses Qt's signal/slot mechanism or the meta-object system

public:
    // Constructor: Initializes the MainWindow object. Takes an optional parent widget parameter, which is set to nullptr by default.
    explicit MainWindow(QWidget *parent = nullptr);

    // Destructor: Cleans up any dynamically allocated resources when the MainWindow object is destroyed.
    ~MainWindow();

signals:
    // Signals that other objects can connect to in order to respond to game state changes
    void startGame();   // Signal emitted when the game starts
    void stopGame();    // Signal emitted when the game stops

private slots:
    // Qt slots are special methods that respond to signals (either emitted by this object or other objects)
    // These slots are connected to UI events, allowing the window to respond to user interaction

    // Slot triggered when the "start" button (probably a QPushButton) is clicked
    void on_comecar_clicked();

    // Slot triggered when the "stop" button (probably a QPushButton) is clicked
    void on_parar_clicked();

    // Slot triggered when the horizontal slider's value changes (likely to adjust a setting such as game speed or volume)
    void on_horizontalSlider_valueChanged(int value);

private:
    // Pointer to the Scene object, which likely handles the graphical elements of the application (e.g., rendering a game world or UI components)
    Scene *s;

    // Pointer to the UI object generated by Qt's Designer tool, which manages the layout and widgets in the main window.
    Ui::MainWindow *ui;
};

#endif // MAINWINDOW_H
